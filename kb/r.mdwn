## R

R is a powerful graphing tool that I use under linux and FreeBSD. It may be
available on other systems, I'm not sure.

### Reading in data

Reading a CSV

    d = read.csv("swimming_progress.csv")
    
If one of the columns you're reading in has dates, you might need to specify the column types

    d = read.csv("swimming_progress.csv", colClasses=c("Date", "numeric", "numeric","numeric"))

if the dataset you're reading in is large, to save memory it is possible to ignore the columns you don't need:

    d = read.csv("swimming_progress.csv", colClasses=c("Date", "NULL", "numeric","NULL"))

If the csv file is gzipped to save space:

    d = read.csv(gzfile("swimming_progress.csv"))

### Plotting the data to a graph on screen

Bring up a graph window

    x11()

### plot the data

    plot(d[,1], d[,2], type="l", col="blue", xlab="date", ylab="Continuous 50m laps")

The first param is the X axis, the second is the Y axis. The remaining params are named and can be in any order, or ommitted.

useful types: l (line), b (box), p (point)

add lines to the current graph (similar function prototype to plot):

    lines(d[,1], d[,4], type="l", col="red")

draw a histogram:

    hist(d[,4])

add a title:

    title("James' Swimming Progress")

add a legend:

    legend("topleft",c("continuous laps","total laps"), cex=0.8, col=c("red","blue"), lty=1:1)

### Writing to a file instead of to screen:

instead of calling x11() at the start, use:

    pdf(file="swimming.pdf", height=5, width=8)

and then close the file at the end

    dev.off()

With large datasets, the resulting vector file may be too large to be useful. To generate a png instead of a pdf:

    png(filename="swimming.png", width=640, height=480)

The current version of R outputs uncompressed, version 1.1 PDF files. Nice and
simple, but the result can be very large files, so it often worth converting
them to a higher PDF version that supports compression.

    pdftk input.pdf output output.pdf compress

### scripting

Interactive use of R is good for tweaking the graphs to just how you need it,
but once it's sorted, it's worth saving the complete script to a file s oyou
can recreate the graph as needed. Just save all the commands in a plain text
file, then:

    R --no-save < some_file.r

Alternatively, there is a R wrapper called
(littler)[http://dirk.eddelbuettel.com/code/littler.html]. With that installed,
you can make executable R scripts using the following \#! line

    #!/usr/bin/env r

### manipulating data arrays

return a subset of the data - rows where expressions resolves to true are returned:

    subset(data_array, <expression>)

### packages

Install a package from CRAN:

    install.packages(<package name>)

In debain, better to use the packages via apt-get if available.

Loading a package:

    library(<package name>)


### colours

Colours can be specified using a name as a string, or using rgb().

  col = "red"
  col = rbg(1,0,0)

the rgb() function has an additional element that provides control over the alpha channel of the colour:

  col = rbg(1,0,0,0.25)

### multiple axes

To plot 2 lines on the same graph using seperate axes (left, right):

    # plot the first line
    plot()
    # reset the canvas 
    par(new=T)
    # add the second axis on the right of the plot
    axis(4)
    # plot the second line
    plot()

### getting help

on a function

    ?plot

searching

    help.search("function")

### Useful links

* [delicious](http://del.icio.us/yob/r)
