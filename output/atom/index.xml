<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>yob.id.au/</id>
  <title></title>
  <updated>2009-03-21T12:15:00Z</updated>
  <link rel="alternate" href="yob.id.au"/>
  <link rel="self" href="yob.id.au/atom/index.xml"/>
  <author>
    <name></name>
    <uri></uri>
  </author>
  <entry>
    <id>tag:yob.id.au,2009-03-21:/2009/03/21/eventmachine_based_ftp_server/</id>
    <title type="html">An EventMachine based FTP Server</title>
    <published>2009-03-21T12:15:00Z</published>
    <updated>2009-03-26T08:59:26Z</updated>
    <link rel="alternate" href="yob.id.au/2009/03/21/eventmachine_based_ftp_server/"/>
    <content type="html">&lt;h3&gt;The short version&lt;/h3&gt;

&lt;p&gt;I've released a demo of an FTP server for ruby, built on the EventMachine library.&lt;/p&gt;

&lt;p&gt;Check it out here: &lt;a href="http://github.com/yob/em-ftpd/tree"&gt;http://github.com/yob/em-ftpd/tree&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;The full version&lt;/h3&gt;

&lt;p&gt;Inside our little web 2.0 bubble we all get very excited about shiny things
like REST, web services and open JSON APIs, so it's easy to forget in the
business world with many trading partners and legacy systems, a technology that
works tends to hang around for an awfully long time.&lt;/p&gt;

&lt;p&gt;In the supply chain world, the most common way I've encountered for electronic
trading between businesses (submitting orders, receiving invoices, etc) is over
good 'ole &lt;a href="http://tools.ietf.org/rfc/rfc959.txt"&gt;FTP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yes, it's old and insecure. However it's also simple, well understood, has
plenty of library support and is now embedded in inventory management software
all over the place. You work with what you've got.&lt;/p&gt;

&lt;p&gt;For a few years I've maintained a custom FTP server for a client. It accepts
uploaded orders from their customers, translates them to a format the clients
system can understand and saves a copy to a outbox folder. Every few hours the
clients inventory software connects and downloads the orders directly into
their system. It's hardly a high traffic site, maybe 20 transfers a day, all
small text files.&lt;/p&gt;

&lt;p&gt;The server was a small ruby daemon, based on the
&lt;a href="http://rubyforge.org/projects/ftpd/"&gt;ftpd.rb&lt;/a&gt; script published by Chris
Wanstrath, and it performed admirably. Recently I was asked to add some new
features, and I realised over the years the code had turned into 800 lines of
spaghetti. A rewrite was in order.&lt;/p&gt;

&lt;p&gt;At the same time a few fellow Australian Rubyist's had been &lt;a href="http://gist.github.com/81523/"&gt;playing
around&lt;/a&gt; with
&lt;a href="http://rubyeventmachine.com/"&gt;EventMachine&lt;/a&gt;, a library that claims to help
produce highly scalable network code. Scalability wasn't my issue, but the
examples I could see looked alarmingly clean and simple for network socket
based applications. Best of all, there was no need to involve threads, the arch
nemesis of maintainable code.&lt;/p&gt;

&lt;p&gt;Clean and simple was the goal of my rewrite. Bingo.&lt;/p&gt;

&lt;p&gt;It took a little while to come to a working solution, mainly because I found
few public EventMachine samples that indicated how to open multiple sockets and
share data between them. It turned out to be possible and my rewritten server
went into production a few days ago.&lt;/p&gt;

&lt;p&gt;There was no point asking this client to release their new server as open
source, it's fairly specific to their needs. However I was keen to provide a
public demo of an EventMachine based FTP server, so I've published a new
demo script on github:
&lt;a href="http://github.com/yob/em-ftpd/tree"&gt;http://github.com/yob/em-ftpd/tree&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's not particularly useful as a real FTP server - it hard codes the
authentication tokens and provides a simulated directory structure. Hopefully
it proves interesting or useful to someone out there though - as a basis for their
own custom FTP server or some other multi-socket protocol.&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>tag:yob.id.au,2009-02-27:/2009/02/27/outdated_gems_under_rails_the_second/</id>
    <title type="html">Outdated Gems Under Rails (the second)</title>
    <published>2009-02-27T11:53:00Z</published>
    <updated>2009-03-26T09:52:40Z</updated>
    <link rel="alternate" href="yob.id.au/2009/02/27/outdated_gems_under_rails_the_second/"/>
    <content type="html">&lt;p&gt;Last year I &lt;a href="/blog/2008/06/23/outdated_gems_under_rails"&gt;shared a short initialiser fragment&lt;/a&gt;
for rails that warns you if you've loaded an out of date gem.&lt;/p&gt;

&lt;p&gt;It's a non fatal warning, just a reminder that it might be worthwhile upgrading.&lt;/p&gt;

&lt;p&gt;I still use the fragment, but have updated it to support rails 2.2+. To use it,
just drop the code into a file in the config/initializers directory of your
app.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# *************************************
# A handy initiliser that logs when the loaded version of
# Rails or a gem dependency is out of date. The notice is
# non-fatal (often we want it to be out of date). I often
# forget which version of a gem my apps are using, and 
# don't notice when there is a newer version available.
#
# Only really makes sense on Rails &amp;gt;= 2.1, where initialisers
# and gem dependencies first appeared. Drop this file in
# config/initializers/
#
# James Healy
# 2nd Feb 2009
# *************************************

outdated = []

# *************************************
# check the current version of Rails to see if it's the latest
# *************************************
max_rails_gem = Gem.cache.find_name('rails').map(&amp;amp;:version).map(&amp;amp;:version).max

if max_rails_gem &amp;amp;&amp;amp; (Rails::VERSION::STRING &amp;lt; max_rails_gem)
  outdated &amp;lt;&amp;lt; {:name =&amp;gt; "rails", :loaded =&amp;gt; Rails::VERSION::STRING, :max =&amp;gt; max_rails_gem}
end

# *************************************
# check the current version of all required gems to see if they're the latest
# *************************************
Rails.configuration.gems.each do |gem|
  name = gem.name
  if Rails::VERSION::STRING &amp;gt;= "2.2.0"
    loaded_version = gem.specification.version.to_s
  else
    loaded_version = gem.version.to_s
  end
  max_gem_version = Gem.cache.find_name(name).map(&amp;amp;:version).map(&amp;amp;:version).max

  if max_gem_version &amp;amp;&amp;amp; (loaded_version &amp;lt; max_gem_version)
    outdated &amp;lt;&amp;lt; {:name =&amp;gt; name, :loaded =&amp;gt; loaded_version, :max =&amp;gt; max_gem_version}
  end
end

# *************************************
# print notices 
# *************************************
unless outdated.empty?
  logger = RAILS_DEFAULT_LOGGER
  logger.info 
  logger.info "*******************************"
  outdated.each do |w|
    logger.info "NOTICE: #{w[:name]} version #{w[:loaded]} is not the most recent version of #{w[:name]} available on the system (#{w[:max]})"
  end
  logger.info "*******************************"
  logger.info 
end
&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
  <entry>
    <id>tag:yob.id.au,2008-11-03:/2008/11/03/cuecat/</id>
    <title type="html">Cuecat</title>
    <published>2008-11-03T04:15:00Z</published>
    <updated>2009-03-26T10:12:24Z</updated>
    <link rel="alternate" href="yob.id.au/2008/11/03/cuecat/"/>
    <content type="html">&lt;p&gt;Why stop at two post on IDs, here's a third.&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://en.wikipedia.org/wiki/Cuecat"&gt;cuecat&lt;/a&gt; is a cheap "wand" style
barcode scanner with an semi-interesting history. The end of the story is that
the company went bust, and they're now fairly cheaply available.&lt;/p&gt;

&lt;p&gt;I got one for ~AU$30 from
&lt;a href="http://www.librarything.com/wiki/index.php/CueCat:_ISBNs_and_Barcodes"&gt;librarything.com&lt;/a&gt;.
I work with books, and real barcode scanners cost an arm and a leg, so I
justified it as a useful work expense.&lt;/p&gt;

&lt;p&gt;It's USB, and appears as a keyboard to the computer, so no special drivers are
required. The one hiccup is that it returns an obfuscated code. No worries, the
decoding algorithm is simple and available all over the net.&lt;/p&gt;

&lt;p&gt;Here's a ruby version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install cuecat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Is the code from a cuecat?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;puts CueCat.valid?(".C3nZC3nZC3n2CNjXCNz0DxnY.cGen.ENr7CNT3Chz3ENj1CG.")
=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Is the code an obfuscated EAN13?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;puts CueCat.ean?(".C3nZC3nZC3n2CNjXCNz0DxnY.cGen.ENr7CNT3Chz3ENj1CG.")
=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Extract more detail from the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;code = CueCat.new(".C3nZC3nZC3n2CNjXCNz0DxnY.cGen.ENr7CNT3Chz3ENj1CG.")
puts code.code_type
=&amp;gt; "IBN"

puts code.id
=&amp;gt; "000000005112157601"

puts code.value
=&amp;gt; "978184354916"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;API look familiar? It's more or less the same as my oodles of &lt;a href="http://yob.id.au/blog/2008/10/23/barrage_of_new_gems/"&gt;other ID
gems&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>tag:yob.id.au,2008-10-23:/2008/10/23/barrage_of_new_gems/</id>
    <title type="html">Barrage of New Gems</title>
    <published>2008-10-23T06:30:00Z</published>
    <updated>2009-03-26T10:11:16Z</updated>
    <link rel="alternate" href="yob.id.au/2008/10/23/barrage_of_new_gems/"/>
    <content type="html">&lt;p&gt;Working for a company that sits in the middle of a supply chain, we deal with a
significant volume of data.&lt;/p&gt;

&lt;p&gt;Inbound we have things like customer orders, new product data, invoices and
purchase order status reports from suppliers.&lt;/p&gt;

&lt;p&gt;Outbound we have things like purchase orders going to our suppliers, order
confirmations, invoices and new product data going to our customers.&lt;/p&gt;

&lt;p&gt;Most of this is electronic and automatic, and is therefore highly dependent on
industry standardised identifiers. In Australia, products are usually
identified with an
&lt;a href="http://en.wikipedia.org/wiki/European_Article_Number"&gt;EAN-13&lt;/a&gt;, but some of our
US based suppliers are still using
&lt;a href="http://en.wikipedia.org/wiki/Universal_Product_Code"&gt;UPC-12&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Australian businesses can be identified by their
&lt;a href="http://en.wikipedia.org/wiki/Australian_Business_Number"&gt;ABN&lt;/a&gt;, and in the book
industry there is a unique global ID system for businesses called
&lt;a href="http://www.isbn.org/standards/home/isbn/us/san/san-qa.asp"&gt;SAN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To deal with all these IDs in my ruby code, I've put together some very simple
little gems for recognising and validating the various numbers I encounter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install ean13
gem install upc
gem install san
gem install abn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They're all single file, single class libraries with similar looking APIs, and
operate in a similar way to the ISTC gem I talk about
&lt;a href="http://yob.id.au/blog/2008/10/22/istc/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;EAN13:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require 'ean13'

EAN13.valid?("9781843549161")
=&amp;gt; true
EAN13.complete("978184354916")
=&amp;gt; "9781843549161"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;UPC:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require 'upc'

UPC.valid?("028947663058")
=&amp;gt; true
UPC.complete("02894766305")
=&amp;gt; "028947663058"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SAN: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require 'san'

SAN.valid?("9013725")
=&amp;gt; true
SAN.complete("901372")
=&amp;gt; "9013725"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ABN:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require 'abn'

ABN.valid?("12042168743")
=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing groundbreaking or exciting, but useful little libraries when you need
to decipher what sort of identifier a number is, and for validating fields in
your models.&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>tag:yob.id.au,2008-10-22:/2008/10/22/istc/</id>
    <title type="html">International Standard Text Code (ISTC)</title>
    <published>2008-10-22T08:45:00Z</published>
    <updated>2009-03-26T10:09:45Z</updated>
    <link rel="alternate" href="yob.id.au/2008/10/22/istc/"/>
    <content type="html">&lt;p&gt;The &lt;a href="http://en.wikipedia.org/wiki/International_Standard_Text_Code"&gt;International Standard Text
Code&lt;/a&gt; (ISTC)
is a new ISO standard for identifying textual works.&lt;/p&gt;

&lt;p&gt;Where an ISBN is used to identify a particular version of a textual work, the
ISTC will be be identical across all versions. There are many versions (and
therefore ISBNs) of Harry Potter and the Half Blood Prince, but there will be a
single ISTC for all of them.&lt;/p&gt;

&lt;p&gt;This should make it easier for companies like the one I work for to identify
alternate versions, improve product recommendations and track sales trends.&lt;/p&gt;

&lt;p&gt;It's likely we won't start seeing them in the wild until sometime in 2009, but
I've been exploring how they work and have created a rubygem for working with
them.&lt;/p&gt;

&lt;p&gt;Installation is easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install istc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And so is using it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ISTC.new("0A9200800000007C").valid?
=&amp;gt; true

ISTC.valid?("0A9200800000007C")
=&amp;gt; true

ISTC.valid?("0A9200800000007B")
=&amp;gt; false

ISTC.complete("0A9200800000007")
=&amp;gt; "0A9200800000007C"

ISTC.new("0A9200800000007").to_s
=&amp;gt; "0A9-2008-00000007-C"
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The source is on github: &lt;a href="https://github.com/yob/istc/tree"&gt;https://github.com/yob/istc/tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The gem is in my misc gems rubyforge project: &lt;a href="http://rubyforge.org/projects/yob-projects/"&gt;http://rubyforge.org/projects/yob-projects/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
</feed>

